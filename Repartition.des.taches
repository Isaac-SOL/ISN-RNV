#Tâches:
Faites :
  - Choix du format de stockage des maps (.txt[stockage]/tableau[utilisation])
  - Choix de l'organisation des réseaux (Arborescence..)
  - Faire un menu (Simple)
  - Ouverture d'un fichier map + conversion tableau / txt du format de map
  
Priorité 1 :
  - Stockage des maps (.txt)
  - Choix du stockage des réseaux (.xml? Le .json a l'air mieux)
  - Reflexion sur l'algorithme de RNV
  - Mettre un place une base de jeu jouable (déplacement, traduction map -> plateau, règles du jeu)
  
Priorité 2 :
  - Algorithme plus détaillé de RNV
  - 
  
Priorité 3 :
  - Traduction en Java de la RNV, test pour déterminer les meilleurs variables d'algorithme
  - Choix du calcul de score

Priorité 4 :
  - Génération aléatoire de map
  - Pouvoir voir un graphique lisible de chaque individu d'un RNV



#Algorithmes en parralèle:

  Environnement ("Jeu"):
  - Accepte des inputs (Haut/Bas/Gauche/Droite)
  - Déplace le pion selon l'input reçu et l'environnement, les "règles"
  - Envoie à l'algorithme de Test les données des cases entourant le pion   ] Ces deux parties sont importantes. Elles rendent l'algorithme
  - Envoie à l'algorithme de Test son score                                 ] de Test totalement indépendant du "jeu":
                                                                              L'algorithme de Test peut être utilisé pour des tâches totalement différentes de celle prévue par notre projet
  Test:
  - Envoie des contrôles à l'algorithme d'Environnement selon le réseau choisi et l'input reçu depuis le système d'Environnement (Les cases)
  - Signe chaque réseau testé avec son score reçu depuis l'algorithme d'Environnement
  
  Génération:
  - Trie les fichiers de réseaux et envoie à l'algorithme de Test celui qui doit être testé
  - Quand une génération entière est testée, en crée une nouvelle selon les scores et les familles
  
#Répartition:

Isaac :

- Faire un menu (Simple)

Dironiil :

Viviou :

- Stockage + lecture des map
