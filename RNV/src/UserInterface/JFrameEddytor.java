
package UserInterface;

import Game.Tile;
import Tools.FileIO;
import static Tools.MapTranslator.*;
import Tools.SystemInfo;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Guillaume
 */


public class JFrameEddytor extends javax.swing.JFrame {

     /** Crée un nouveau JFrameEddytor */
    public JFrameEddytor() {
        initComponents();
        chosenTileType = "Obstacle";
        path = null;
        newMap = true;
    }
    /**
     * Crée un nouveau JFrameEddytor avec une map pré-entrée
     * @param map La map à éditer
     * @param mapPath Le chemin de la map actuelle
     */
    public JFrameEddytor(Tile[][] map, String mapPath) {
        this.map = map;
        initComponents();
        editTable();
        chosenTileType = "Obstacle"; //Initialise le block actuel à "plein"
        path = mapPath; //initialise le chemin de fichier de la map donnée
        newMap = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooserMap = new javax.swing.JFileChooser();
        jFileSaverMap = new javax.swing.JFileChooser();
        jFrameSize = new javax.swing.JFrame();
        jButtonBack = new javax.swing.JButton();
        jTextFieldWidth = new javax.swing.JTextField();
        jTextFieldHeight = new javax.swing.JTextField();
        jLabelWidth = new javax.swing.JLabel();
        jLabelHeight = new javax.swing.JLabel();
        jButtonOk = new javax.swing.JButton();
        jFrameErrorSize = new javax.swing.JFrame();
        jButtonErrorOk = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jFrameErrorBeginning = new javax.swing.JFrame();
        jButtonErrorOk1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemNew = new javax.swing.JMenuItem();
        jMenuItemOpen = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemSave = new javax.swing.JMenuItem();
        jMenuItemSaveAs = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemBackMenu = new javax.swing.JMenuItem();
        jMenuBlock = new javax.swing.JMenu();
        jMenuItemTBegin = new javax.swing.JMenuItem();
        jMenuItemTEmpty = new javax.swing.JMenuItem();
        jMenuItemTBlock = new javax.swing.JMenuItem();

        jFileChooserMap.setAcceptAllFileFilterUsed(false);
        jFileChooserMap.setApproveButtonText("Ouvrir");
        jFileChooserMap.setApproveButtonToolTipText("Utiliser cette map pour les tests");
        jFileChooserMap.setCurrentDirectory(new java.io.File(System.getProperty("user.home")+"/Documents"));
        jFileChooserMap.setDialogTitle("Ouvrir une map");
        jFileChooserMap.setFileFilter(FileIO.MapFilter);
        jFileChooserMap.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);
        jFileChooserMap.setToolTipText("");
        jFileChooserMap.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jFileSaverMap.setAcceptAllFileFilterUsed(false);
        jFileSaverMap.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        jFileSaverMap.setApproveButtonToolTipText("Enregistrer la map sous ce fichier");
        jFileSaverMap.setCurrentDirectory(new java.io.File(System.getProperty("user.home")+"/Documents"));
        jFileSaverMap.setDialogTitle("Enregistrer une map");
        jFileSaverMap.setFileFilter(FileIO.MapFilter);
        jFileSaverMap.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);
        jFileSaverMap.setToolTipText("");
        jFileSaverMap.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jFrameSize.setTitle("Nouvelle map");
        jFrameSize.setLocation(SystemInfo.getScreenDimension.width/2-100, SystemInfo.getScreenDimension.height/2-60);
        jFrameSize.setResizable(false);
        jFrameSize.setSize(new java.awt.Dimension(236, 144));

        jButtonBack.setText("Retour");
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToEddytor(evt);
            }
        });

        jLabelWidth.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        jLabelWidth.setText("Largeur");

        jLabelHeight.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        jLabelHeight.setText("Hauteur");

        jButtonOk.setText("Ok");
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SizeOk(evt);
            }
        });

        javax.swing.GroupLayout jFrameSizeLayout = new javax.swing.GroupLayout(jFrameSize.getContentPane());
        jFrameSize.getContentPane().setLayout(jFrameSizeLayout);
        jFrameSizeLayout.setHorizontalGroup(
            jFrameSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameSizeLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jFrameSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrameSizeLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jFrameSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelWidth)
                            .addComponent(jLabelHeight))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jFrameSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldWidth, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(jTextFieldHeight))
                        .addGap(63, 63, 63))
                    .addGroup(jFrameSizeLayout.createSequentialGroup()
                        .addComponent(jButtonBack)
                        .addGap(83, 83, 83)
                        .addComponent(jButtonOk)
                        .addGap(24, 24, 24))))
        );
        jFrameSizeLayout.setVerticalGroup(
            jFrameSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrameSizeLayout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(jFrameSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelHeight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jFrameSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelWidth)
                    .addComponent(jTextFieldWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jFrameSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonBack)
                    .addComponent(jButtonOk))
                .addGap(16, 16, 16))
        );

        jFrameErrorSize.setTitle("Erreur");
        jFrameErrorSize.setAlwaysOnTop(true);
        jFrameErrorSize.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jFrameErrorSize.setLocation(SystemInfo.getScreenDimension.width/2-100, SystemInfo.getScreenDimension.height/2-60);
        jFrameErrorSize.setResizable(false);
        jFrameErrorSize.setSize(new java.awt.Dimension(207, 125));

        jButtonErrorOk.setLabel("OK");
        jButtonErrorOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ErrorOk(evt);
            }
        });

        jLabel1.setText("Les valeurs de hauteurs et de");

        jLabel2.setText("largeurs doivent être numériques !");

        javax.swing.GroupLayout jFrameErrorSizeLayout = new javax.swing.GroupLayout(jFrameErrorSize.getContentPane());
        jFrameErrorSize.getContentPane().setLayout(jFrameErrorSizeLayout);
        jFrameErrorSizeLayout.setHorizontalGroup(
            jFrameErrorSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameErrorSizeLayout.createSequentialGroup()
                .addGroup(jFrameErrorSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrameErrorSizeLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1))
                    .addGroup(jFrameErrorSizeLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addGroup(jFrameErrorSizeLayout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(jButtonErrorOk)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jFrameErrorSizeLayout.setVerticalGroup(
            jFrameErrorSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameErrorSizeLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonErrorOk)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jFrameErrorBeginning.setTitle("Erreur");
        jFrameErrorBeginning.setAlwaysOnTop(true);
        jFrameErrorBeginning.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jFrameErrorBeginning.setLocation(SystemInfo.getScreenDimension.width/2-100, SystemInfo.getScreenDimension.height/2-60);
        jFrameErrorBeginning.setResizable(false);
        jFrameErrorBeginning.setSize(new java.awt.Dimension(207, 125));

        jButtonErrorOk1.setLabel("OK");
        jButtonErrorOk1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ErrorOkBeginning(evt);
            }
        });

        jLabel3.setText("Cette map ne contient pas de");

        jLabel4.setText("tile de départ.");

        javax.swing.GroupLayout jFrameErrorBeginningLayout = new javax.swing.GroupLayout(jFrameErrorBeginning.getContentPane());
        jFrameErrorBeginning.getContentPane().setLayout(jFrameErrorBeginningLayout);
        jFrameErrorBeginningLayout.setHorizontalGroup(
            jFrameErrorBeginningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrameErrorBeginningLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(jFrameErrorBeginningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jFrameErrorBeginningLayout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jButtonErrorOk1))
                    .addGroup(jFrameErrorBeginningLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel4)))
                .addGap(17, 17, 17))
        );
        jFrameErrorBeginningLayout.setVerticalGroup(
            jFrameErrorBeginningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameErrorBeginningLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonErrorOk1)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(SystemInfo.getScreenDimension.width/2-400, SystemInfo.getScreenDimension.height/2-400);
        setMinimumSize(new java.awt.Dimension(600, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));
        setSize(new java.awt.Dimension(800, 800));

        jMenuFile.setText("Fichier");
        jMenuFile.setMinimumSize(new java.awt.Dimension(40, 21));

        jMenuItemNew.setText("Nouveau");
        jMenuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewMap(evt);
            }
        });
        jMenuFile.add(jMenuItemNew);

        jMenuItemOpen.setText("Ouvrir...");
        jMenuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMap(evt);
            }
        });
        jMenuFile.add(jMenuItemOpen);
        jMenuFile.add(jSeparator1);

        jMenuItemSave.setText("Enregistrer");
        jMenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveMap(evt);
            }
        });
        jMenuFile.add(jMenuItemSave);

        jMenuItemSaveAs.setText("Enregistrer sous...");
        jMenuItemSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsMap(evt);
            }
        });
        jMenuFile.add(jMenuItemSaveAs);
        jMenuFile.add(jSeparator2);

        jMenuItemBackMenu.setText("Retour au menu");
        jMenuItemBackMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackMenu(evt);
            }
        });
        jMenuFile.add(jMenuItemBackMenu);

        jMenuBar1.add(jMenuFile);

        jMenuBlock.setText("Blocs");
        jMenuBlock.setMinimumSize(new java.awt.Dimension(40, 21));
        jMenuBlock.setPreferredSize(new java.awt.Dimension(51, 21));

        jMenuItemTBegin.setText("Depart");
        jMenuItemTBegin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BeginTile(evt);
            }
        });
        jMenuBlock.add(jMenuItemTBegin);

        jMenuItemTEmpty.setText("Vide");
        jMenuItemTEmpty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmtpyTile(evt);
            }
        });
        jMenuBlock.add(jMenuItemTEmpty);

        jMenuItemTBlock.setText("Plein");
        jMenuItemTBlock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlockTile(evt);
            }
        });
        jMenuBlock.add(jMenuItemTBlock);

        jMenuBar1.add(jMenuBlock);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 777, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BeginTile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BeginTile
        chosenTileType = "Token";
    }//GEN-LAST:event_BeginTile

    private void EmtpyTile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmtpyTile
        chosenTileType = "Empty";
    }//GEN-LAST:event_EmtpyTile

    private void BlockTile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlockTile
        chosenTileType = "Obstacle";
    }//GEN-LAST:event_BlockTile

    private void NewMap(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewMap
        jFrameSize.setVisible(true); //Affiche la sous fenètre pour choisir la taille de la map
    }//GEN-LAST:event_NewMap

    private void OpenMap(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMap
        int returnVal = jFileChooserMap.showOpenDialog(null);   //Ouvre jFileChooserMap et regarde sur quel bouton il a appuyé
        if (returnVal == JFileChooser.APPROVE_OPTION) {         //Vérifie que l'utilisateur ait appuyé sur ok
            File chosenMap = jFileChooserMap.getSelectedFile(); //Récupère le fichier choisi par l'utilisateur
            try {
                map = intToTiles(FileIO.readIntegerArrayFile(chosenMap)); //Lecture du fichier .map
                path = chosenMap.getAbsolutePath(); //Mise en mémoire du path du fichier
                
                if (newMap == false) { //Si il y a déjà une map ouverte, ouvre une nouvelle instance pour afficher la nouvelle et ferme l'actuelle
                    new JFrameEddytor(map, path).setVisible(true);
                this.dispose();
                } else { //Sinon affiche la nouvelle map dans la fenètre actuelle 
                    editTable();
                    newMap = false;
                }
                
            } catch (IOException ex) {
                System.out.println("Problème lors de l'accès au fichier " + chosenMap.getAbsolutePath() + "Erreur : " + ex.getMessage());
            } catch (ClassNotFoundException ex) {
                System.out.println("Erreur de classe du fichier sérialisé : " + ex.getMessage());
            }
            
        } else {
            System.out.println("Accès au fichier annulé.");
        }
    }//GEN-LAST:event_OpenMap

    private void SaveMap(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveMap
         if (path != null && map != null) {
            try {
                boolean beginning = false;
                for (int i = 0; i < map.length; i++) { //vérifie qu'il y a bien un départ
                    for (int j = 0; j < map[0].length; j++) {
                        if ("Token".equals(map[i][j].getType())) {
                            beginning = true;
                        }
                    }
                }
                if (beginning) {
                    FileIO.writeIntegerArrayFile(tilesToInt(map), path);
                } else { //Sinon affiche une erreur
                        System.out.println("Il n'y a pas de tile de départ !");
                        jFrameErrorBeginning.setVisible(true);
                }
                
            } catch (IOException ex) {
                System.out.println("Erreur lors de l'écriture : " + ex.getMessage());
            }
        } else {
            System.out.println("La map est inexistante ou nouvelle !");
        }
    }//GEN-LAST:event_SaveMap

    private void SaveAsMap(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsMap
        int returnVal = jFileSaverMap.showSaveDialog(null);   //Ouvre jFileSaverMap et regarde sur quel bouton il a appuyé
        if (returnVal == JFileChooser.APPROVE_OPTION) {         //Vérifie qe l'utilisateur ait appuyé sur ok
            File chosenMap = jFileSaverMap.getSelectedFile(); //Récupère le fichier choisi par l'utilisateur
            if (map != null) {
                try {
                    boolean beginning = false;
                    for (int i = 0; i < map.length; i++) { //vérifie qu'il y a bien un départ
                        for (int j = 0; j < map[0].length; j++) {
                            if ("Token".equals(map[i][j].getType())) {
                                beginning = true;
                            }
                        }
                    }
                    
                    if (beginning) { //Sauve s'il y a un départ
                        path = chosenMap.getAbsolutePath();
                        if (!".map".equals(path.substring(path.length()-4))) {
                            path += ".map";
                        }
                        FileIO.writeIntegerArrayFile(tilesToInt(map), path);
                    } else { //Sinon affiche une erreur
                        System.out.println("Il n'y a pas de tile de départ !");
                        jFrameErrorBeginning.setVisible(true);
                    }
                    
                } catch (IOException ex) {
                    System.out.println("Erreur lors de l'écriture : " + ex.getMessage());
                }
            } else {
                System.out.println("Il n'y a rien à enregistrer.");
            }
            
        } else {
            System.out.println("Accès au fichier annulé.");
        }
    }//GEN-LAST:event_SaveAsMap

    private void BackMenu(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackMenu
        new JFrameMainMenu().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BackMenu

    private void BackToEddytor(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToEddytor
        jFrameSize.setVisible(false);
        System.out.println("Nouvelle map annulée par l'utilisateur.");
    }//GEN-LAST:event_BackToEddytor

    private void SizeOk(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SizeOk
        try {
            //récupére largeur et hauteur entrées par l'utilisateur
            int width = Integer.parseInt(jTextFieldWidth.getText());
            int height = Integer.parseInt(jTextFieldHeight.getText());
            
            if (width > 50 || height > 50) { //Vérification d'une taille maximum
                System.out.println("Taille trop importante : le maximum est de 50");
            } else {
                //crée et initialise une map avec des "cases vides" avec ces valeurs
                map = new Tile[height][width];
                for (int i = 0; i < height; i++) {
                    for (int j = 0; j < width; j++) {
                        map[i][j] = new Tile("Empty",i,j);
                    }
                }

                if (newMap == false) { //Si il y a déjà une map ouverte, ouvre une nouvelle instance pour afficher la nouvelle et ferme l'actuelle
                    new JFrameEddytor(map, null).setVisible(true);
                    this.dispose();
                } else { //Sinon affiche la nouvelle map dans la fenètre actuelle 
                    editTable();
                    newMap = false;
                }     

                jFrameSize.setVisible(false); //referme la fenètre
            }
            
        }catch (NumberFormatException e) {
            System.out.println("Erreur dans la création de map, valeurs non numériques : " + e.getMessage());
            jFrameErrorSize.setVisible(true);
        }
    }//GEN-LAST:event_SizeOk

    private void ErrorOk(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ErrorOk
        jFrameErrorSize.setVisible(false);
    }//GEN-LAST:event_ErrorOk

    private void ErrorOkBeginning(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ErrorOkBeginning
        jFrameErrorBeginning.setVisible(false);
    }//GEN-LAST:event_ErrorOkBeginning

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameEddytor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameEddytor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameEddytor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameEddytor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameEddytor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonErrorOk;
    private javax.swing.JButton jButtonErrorOk1;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JFileChooser jFileChooserMap;
    private javax.swing.JFileChooser jFileSaverMap;
    private javax.swing.JFrame jFrameErrorBeginning;
    private javax.swing.JFrame jFrameErrorSize;
    private javax.swing.JFrame jFrameSize;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelHeight;
    private javax.swing.JLabel jLabelWidth;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuBlock;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemBackMenu;
    private javax.swing.JMenuItem jMenuItemNew;
    private javax.swing.JMenuItem jMenuItemOpen;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JMenuItem jMenuItemSaveAs;
    private javax.swing.JMenuItem jMenuItemTBegin;
    private javax.swing.JMenuItem jMenuItemTBlock;
    private javax.swing.JMenuItem jMenuItemTEmpty;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTextField jTextFieldHeight;
    private javax.swing.JTextField jTextFieldWidth;
    // End of variables declaration//GEN-END:variables

    
    //Map utilisée
    private Tile[][] map;
    
    //Booléen signifiant si la map est nouvelle
    private boolean newMap;

    //Path du fichier édité
    private String path;
    
    //Variable utilisée pour éditer les blocs
    private String chosenTileType;
    
    //Variables utilisées pour créer la Table.
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableEditedMap;
    
    /**
     * Méthode qui utilise un tableau de Integer pour créer et remplir une Table, qui est ensuite affichée pour être modifiée.
     * @param map Integer[][] à afficher à l'écran
     */
    private void editTable() {       
        
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableEditedMap = new javax.swing.JTable();

        //Initialise la Table avec la map pour la remplir, ainsi qu'un String[] qui fait le titre des colonnes.
        printMap();
        
        //<editor-fold defaultstate="collapsed" desc="Code du Scroller, copié du générateur auto de NetBeans">
        jScrollPane2.setViewportView(jTableEditedMap);
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(82, Short.MAX_VALUE))
        );
        //</editor-fold>
        
        //<editor-fold defaultstate="collapsed" desc="Code de modification lors d'un clic sur une cellule du tableau">
        jTableEditedMap.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) { //Action quand il y a un clic sur le tableau
                int line = jTableEditedMap.rowAtPoint(evt.getPoint()); //récupère la ligne correspondant au point du clic
                int column = jTableEditedMap.columnAtPoint(evt.getPoint()); //récupère la colonne correspondant au point du clic
                
                if (line >= 0 && column >= 0) { //Vérifie qu'il n'y a pas d'erreur (coordonnées négatives)
                    
                    if ("Token".equals(chosenTileType)) { //Empèche d'avoir plus d'un départ (0 = case de départ)
                        for (int i = 0; i < map.length; i++) { 
                            for (int j = 0; j < map[0].length; j++) {
                                if ("Token".equals(map[i][j].getType())) {
                                    map[i][j].setType("Empty");
                                }
                            }
                        }
                    }
                    map[line][column].setType(chosenTileType); //Donne à cette case la valeur actuelle de tile
                    System.out.println("Click : " + map[line][column].getType() + " en " + (line+1) + ", " + (column+1));
                    
                    printMap();
                }
            }
        });
        //</editor-fold>
        
    }
    
    private static class DefaultTableModelImpl extends DefaultTableModel {

        public DefaultTableModelImpl(Object[][] data, Object[] columnNames) {
            super(data, columnNames);
        }
    }
    
    private void printMap () {
        jTableEditedMap.setModel(new JFrameEddytor.DefaultTableModelImpl( //Actualise le modèle du tableau
                        tilesToIcons(map),
                        new String [map[0].length]
                    ){
                        @Override
                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return false;
                        }
                        @Override
                        public Class getColumnClass(int column)
                        {
                            return getValueAt(0, column).getClass();
                        }
                    });
    }
    
}
